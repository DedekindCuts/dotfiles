#!/bin/bash

# get custom environment variables (MINICONDA_PATH in particular)
. $HOME/.shell/.shell-env

# URL of Miniconda .sh installer
MINICONDA_INSTALLER="https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"

# prompt for class of machine
echo "Which kind of setup would you like to do?"
select answer in "Personal" \
	"Work (Veracity)";
do
	case $answer in
		"Personal" )
			SETUP_TYPE="personal"
			break;;
		"Work (Veracity)" )
			SETUP_TYPE="veracity"
			break;;
	esac
done

echo "Checking preliminaries..."
# check if Xcode command line tools are installed and install if not
if type xcode-select >&- && xpath=$( xcode-select --print-path ) && test -d "${xpath}" && test -x "${xpath}"; then
	echo "$(tput setaf 2)Xcode command line tools installed and up to date.$(tput setaf 7)"
else
	echo "Installing Xcode command line tools..."
	xcode-select --install
	echo "$(tput setaf 2)Installed.$(tput setaf 7)"
fi

if [[ "$SETUP_TYPE" == "personal" ]]; then
	# check if Homebrew is installed and install if not
	if which brew >/dev/null; then
		# echo "$(tput setaf 2)Homebrew already installed.$(tput setaf 7)"
		# echo "Updating Homebrew..."
		brew update >/dev/null
		echo "$(tput setaf 2)Homebrew installed and up to date.$(tput setaf 7)"
	else
		echo "Installing Homebrew..."
		/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
		echo "$(tput setaf 2)Installed.$(tput setaf 7)"
	fi

	# check if Git (Homebrew) is installed and install if not
	if brew ls --versions git >/dev/null; then
		# echo "$(tput setaf 2)Git already installed.$(tput setaf 7)"
		# echo "Updating Git..."
		if brew outdated | grep git >/dev/null; then
			brew upgrade git >/dev/null
		else
			:
		fi
		echo "$(tput setaf 2)Git installed and up to date.$(tput setaf 7)"
	else
		echo "Installing Git..."
		brew install git
		echo "$(tput setaf 2)Installed.$(tput setaf 7)"
	fi
	
	# sign in to App Store
	echo "Signing in to App Store..."

	# Workaround for mas signin bug
	until (mas account > /dev/null); do 
		echo "$(tput setaf 3)Please sign in using the App Store app.$(tput setaf 7)" 
		open -a "/Applications/App Store.app"
		echo "$(tput setaf 3)Waiting for signin...$(tput setaf 7)"
		until (mas account > /dev/null); do 
			sleep 3
		done
	done
	##############################

	# Normal signin (uncomment if/when mas bug is resolved)
	# until (mas account > /dev/null); do
	#	mas signin $APPLE_ID &>/dev/null # will need to set APPLE_ID somewhere if this ever works
	# done

	if (mas account > /dev/null); then
		echo "$(tput setaf 2)Signed in.$(tput setaf 7)"
	fi

	# prompt for type of install
	echo "What would you like to do?"
	select answer in "Quick update currently installed programs" \
		"Install all programs" \
		"Selectively update or install programs";
	do
		case $answer in
			"Quick update currently installed programs" )
				brew upgrade
				brew cask upgrade
				mas upgrade
				break;;
			"Install all programs" )
				brew bundle --file=$HOME/.brew/.Brewfile
				break;;
			"Selectively update or install programs" )
				(brew bundle list --taps --file=$HOME/.brew/.Brewfile | while read -r tap ; do
					echo "Tap $tap?"
					select answer in "Yes" "No"
					do
						case $answer in
							Yes )
								brew tap "$tap"
								break;;
							No )
								break;;
						esac
					done <&4
				done) 4<&0
				(brew bundle list --brews --file=$HOME/.brew/.Brewfile | while read -r brew ; do
					echo "Install/upgrade $brew?"
					select answer in "Yes" "No"
					do
						case $answer in
							Yes )
								if brew ls --versions "$brew" > /dev/null; then
									echo "Already installed; updating."
								else
									brew install "$brew"
								fi
								break;;
							No )
								break;;
						esac
					done <&4
				done) 4<&0
				(brew bundle list --casks --file=$HOME/.brew/.Brewfile | while read -r cask ; do
					echo "Install/upgrade $cask?"
					select answer in "Yes" "No"
					do
						case $answer in
							Yes )
								if brew cask ls --versions "$cask" > /dev/null; then
									echo "Already installed; updating."
								else
									brew cask install "$cask"
								fi
								break;;
							No )
								break;;
						esac
					done <&4
				done) 4<&0
				# silently install GNU grep if not already installed (GNU grep is required for extracting the mas ids and names from the mas_list file)
				(if brew ls --versions grep > /dev/null; then :; else brew install grep &> /dev/null; fi
				cat $HOME/.brew/.mas-list | while read -r mas ; do
					id="$(echo $mas | ggrep -oP '^\d+')"
					name="$(echo $mas | ggrep -oP '(?<=\h)[\w\h\d-:]*')"
					echo "Install/upgrade $name?"
					select answer in "Yes" "No"
					do
						case $answer in
							Yes )
								if mas list | grep "$id" &> /dev/null; then 
									echo "Already installed; updating."
								else 
									mas install "$id"
								fi
								break;;
							No )
								break;;
						esac
					done <&4
				done) 4<&0
				# upgrade all installed brews and casks (doing them individually gives an error for brews and uninstalls and reinstalls for casks)
				echo "Updating..."
				brew upgrade
				brew cask upgrade
				mas upgrade
				break;;
		esac
	done

	# prompt for cleanup
	echo "Would you like to clean up by removing old versions of programs?"
	select answer in "Yes" "No"
	do
		case $answer in
			Yes )
				brew cleanup
				break;;
			No )
				break;;
		esac
	done

	# optionally install conda
	echo "Would you like to install conda?"
	select answer in "Yes" "No"
	do
		case $answer in
			Yes )
				# install conda
				if which conda >/dev/null; then
					echo "Installing Conda..."
					echo "NOTE: "
					curl -fsS $MINICONDA_INSTALLER -o $HOME/Downloads/miniconda.sh
					bash $HOME/Downloads/miniconda.sh -p $MINICONDA_PATH
					rm $HOME/Downloads/miniconda.sh
					echo "$(tput setaf 2)Installed.$(tput setaf 7)"
				else
					conda update conda >/dev/null
					echo "$(tput setaf 2)Conda installed and up to date.$(tput setaf 7)"
				fi
				break;;
			No )
				break;;
		esac
	done

elif [[ "$SETUP_TYPE" == "veracity" ]]; then
	# install conda
	if which conda >/dev/null; then
		echo "Installing Conda..."
		echo "NOTE: "
		curl -fsS $MINICONDA_INSTALLER -o $HOME/Downloads/miniconda.sh
		bash $HOME/Downloads/miniconda.sh -p $MINICONDA_PATH
		rm $HOME/Downloads/miniconda.sh
		echo "$(tput setaf 2)Installed.$(tput setaf 7)"
	else
		conda update conda >/dev/null
		echo "$(tput setaf 2)Conda installed and up to date.$(tput setaf 7)"
	fi

	# prompt to install VS Code
	echo "Before continuing, VS Code must be installed if it is not already."
	echo "(https://code.visualstudio.com/download)"
	read -n1 -rsp $'Press any key to continue once VS Code is installed.\n'
else
	echo "$(tput setaf 1)Invalid setup type$(tput setaf 7)"
fi

# prompt to install VS code if it is not found
while [[ ! -d $HOME/Library/Application\ Support/Code ]]; do
	echo "$HOME/Library/Application Support/Code directory not found."
	echo "Before continuing, VS Code must be installed."
	echo "(https://code.visualstudio.com/download)"
	read -n1 -rsp $'Press any key to continue once VS Code is installed, or CTRL+C to exit.\n'
done

## apply custom VS Code settings
ln -sfF $HOME/.vscode-settings/snippets $HOME/Library/Application\ Support/Code/User
ln -sfF $HOME/.vscode-settings/keybindings.json $HOME/Library/Application\ Support/Code/User
ln -sfF $HOME/.vscode-settings/settings.json $HOME/Library/Application\ Support/Code/User

## install VS Code extensions
cat $HOME/.vscode-settings/extensions-list.txt | xargs -L 1 code --install-extension

# for Veracity setup, prompt to install other programs before applying MacOS settings and restart
if [[ "$SETUP_TYPE" == "veracity" ]]; then
	echo "Recommended programs to install (if not installed already):"
	echo "1Password: https://1password.com/downloads"
	echo "Box Sync: https://community.box.com/t5/Using-Box-Sync/Installing-Box-Sync/ta-p/85"
	echo "DB Browser for SQLite: https://sqlitebrowser.org/dl/"
	echo "Google Chrome: https://www.google.com/chrome/"
	echo "GoToMeeting: https://www.gotomeeting.com/features/mac-windows-linux#"
	echo "Microsoft Office: https://www.office.com/"
	echo "Slack: https://slack.com/downloads/mac"
	echo "SonicWall Mobile Connect: App Store"
	echo "Spectacle: https://www.spectacleapp.com/"
	echo "Wrike: https://www.wrike.com/apps/mobile-and-desktop/desktop-app/"
	read -n1 -rsp $'Press any key to continue.\n'
fi

# source .macos file to apply system-wide settings and preferences
echo "Would you like to apply custom macOS settings? (Requires password and restart)"
select answer in "Yes" "No"
do
	case $answer in
		Yes )
			. $HOME/.macos-settings/.macos
			break;;
		No )
			break;;
	esac
done
